{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OpenTimeWatch Project","text":"<p>It is a project which involves building open source hardware and software for smartwatches</p>"},{"location":"Configurator%20Tool/","title":"Configurator Tool","text":"<p>This tool takes place of a python script which allows users to automatically configure their watch firmware before uploading it to the watch. This tool configures:-</p> <ol> <li>WiFi settings(WiFi network and password)</li> <li>Time settings(GMT offset, day light offset and NTP server)</li> <li>Target hardware settings(T-QT-Pro-N4R2 or T-QT-Pro-N8)</li> </ol>"},{"location":"Configurator%20Tool/#requirements","title":"Requirements","text":"<ol> <li>Python (3 or above)</li> </ol> <p>Note</p> <p>This tool does not upload or compile the firmware for the watch.</p>"},{"location":"Configurator%20Tool/#usage","title":"Usage","text":"<p>You can start using the tool by running <code>python otwConfigurator.py</code> or <code>python3 otwConfigurator.py</code> in your terminal. </p>"},{"location":"Hardware%20Setup/","title":"Hardware Setup","text":""},{"location":"Hardware%20Setup/#requirements","title":"Requirements","text":"<ol> <li>LILYGO TQT Pro</li> <li>USB-C cable</li> <li>3mm LED (White colour)</li> <li>Small speaker (earpiece speaker from Redmi 1s)</li> <li>MPU6050 accelerometer</li> <li>Stemma qt connector</li> <li>A computer with PlatformIO installed</li> <li>LiPo battery</li> <li>JST connector (optional)</li> </ol>"},{"location":"Hardware%20Setup/#hardware-setup","title":"Hardware setup","text":"<ol> <li>Solder a white coloured LED to IO33 and 34 with the ground pin soldered on IO34</li> <li>Solder a speaker to GND and IO16</li> <li>Solder a JST connector (included in the TQT Pro's box) to the battery charge pads on the microcontroller or directly solder the battery to the pads</li> <li>Solder a Stemma qt connector to the MPU6050</li> <li>Connect the Stemma qt connector to the TQT Pro</li> </ol>"},{"location":"Hardware/","title":"Hardware","text":""},{"location":"Hardware/#lilygo-tqt-pro","title":"LILYGO TQT Pro","text":"<ol> <li>Processor:- ESP32 S3</li> <li>RAM:- 2MB</li> <li>Flash:- 4MB/8MB</li> <li>2 Buttons</li> <li>Torch</li> <li>Speaker</li> <li>0.85\" GC9107 128 x 128 IPS display</li> <li>MPU6050</li> <li>USB-C</li> </ol> <p>Near EOL due lack of functionality compared to OpenTimeWatch 1 Rev 2.</p>"},{"location":"Hardware/#opentimewatch-1-rev-1","title":"OpenTimeWatch 1 Rev 1","text":"<ol> <li>Processor:- ESP32 S3</li> <li>RAM:- 8MB</li> <li>Flash:- 16MB</li> <li>3 Buttons</li> <li>Torch</li> <li>Speaker</li> <li>1.44\" 128 x 128 TFT display</li> <li>IR transmitter</li> <li>MPU6050</li> <li>Pulse sensor</li> <li>Micro USB-B</li> </ol> <p>Superseded by OpenTimeWatch 1 Rev 2.</p>"},{"location":"Hardware/#opentimewatch-1-rev-2","title":"OpenTimeWatch 1 Rev 2","text":"<ol> <li>Processor:- ESP32 S3</li> <li>RAM:- 8MB</li> <li>Flash:- 16MB</li> <li>3 Buttons</li> <li>Speaker</li> <li>1.54\" 128 x 128 TFT display</li> <li>IR transmitter</li> <li>MPU6050</li> <li>BMP280</li> <li>Micro USB-B</li> </ol> <p>Still in development.</p>"},{"location":"Installation%3A%20Automatic/","title":"Installation: Automatic","text":"<p>This guide is for beginners and people who don't want to manually configure the firmware, it allows the user to configure the firmware using the configuration tool. </p>"},{"location":"Installation%3A%20Automatic/#requirements","title":"Requirements","text":"<ol> <li>VSCode with PlatformIO IDE</li> <li>Python</li> </ol>"},{"location":"Installation%3A%20Automatic/#configuration","title":"Configuration","text":"<ol> <li>Download the <code>.zip</code> file of the firmware source code from here</li> <li>Unzip the source code file</li> <li>Open the unzipped folder using VSCode</li> <li>Open terminal</li> <li>Execute the tool:- <code>python otwConfigurator.py</code> or <code>python3 otwConfigurator.py</code></li> <li>Start configuring using the command line tool</li> </ol> <p>After succesfully configuring the firmware, you can now upload the firmware to your watch.</p>"},{"location":"Installation%3A%20Automatic/#uploading","title":"Uploading","text":"<ol> <li>Connect your watch to your computer using a USB cable.</li> <li>Upload the firmware by clicking the upload button on thee bottom left side of the screen or press Ctrl+Alt+U</li> </ol> <p>After successfully uploading the firmware you can start using the watch.</p>"},{"location":"Installation%3A%20Manual/","title":"Installation: Manual","text":"<p>This guide is for people who want to manually configure the firmware settings via the PlatformIO IDE.</p> <p>Note</p> <p>This guide is not recommended for beginners please refer to the automatic version of this guide.</p>"},{"location":"Installation%3A%20Manual/#requirements","title":"Requirements","text":"<ol> <li>PlatformIO</li> </ol>"},{"location":"Installation%3A%20Manual/#wifi-and-time-configuration","title":"WiFi and Time configuration","text":"<p>Changes in <code>src/osVariables/osVariables.cpp</code> :-</p> <ol> <li>To configure your WiFi network enter your SSID (network name) in line 40  <code>const char* ssid  = \"yourSSID\";</code> (replace yourSSID with your network name) and in line 42 replace yourPassword with your network password <code>const char* password = \"yourPassword\";</code></li> <li>To setup time enter the GMT offset of your region in line 46 <code>const long  gmtOffset_sec = 0;</code> and daylight offset in line 48 <code>const int   daylightOffset_sec = 0;</code> and make sure both of them are in seconds. If you can't get the time properly even after setting the GMT and daylight offset then you might have to change the URL of the NTP server to a URL which is closer to your location in line 44 <code>const char* ntpServer = \"pool.ntp.org\";</code>. Below are a few common NTP server URLs:- </li> </ol> Area HostName Asia asia.pool.ntp.org Europe europe.pool.ntp.org North America north-america.pool.ntp.org Oceania oceania.pool.ntp.org South America south-america.pool.ntp.org"},{"location":"Installation%3A%20Manual/#configuration-for-tqt-pro-n4r2-flash-4mb-psram-2mb","title":"Configuration for TQT pro N4R2 (Flash: 4MB, PSRAM: 2MB)","text":"<p>Just upload the code without any changes to the <code>platformio.ini</code> file. It should look like this:  platformio.ini<pre><code>; PlatformIO Project Configuration File\n\n\n[platformio]\nboards_dir = ./board\n;default_envs = T-QT-Pro-N8\ndefault_envs = T-QT-Pro-N4R2\ndescription = Open source watch OS for ESP32 based watches\n\n;[env:T-QT-Pro-N8]\n[env:T-QT-Pro-N4R2]\nplatform = espressif32@6.6.0\nboard = esp32-s3-t-qt-pro\nframework = arduino\nbuild_flags = \n    -DBOARD_HAS_PSRAM\nlib_deps = \n    lennarthennigs/Button2@^2.3.3\n    adafruit/Adafruit GFX Library@^1.11.11\n    adafruit/Adafruit MPU6050 @ ^2.0.3\n    adafruit/Adafruit Unified Sensor @ ^1.1.4\n</code></pre></p> <p>Note:- PlatformIO is currently assuming we have total 1MB of flash and not detecting the PSRAM.</p>"},{"location":"Installation%3A%20Manual/#configuration-for-tqt-pro-n8-flash-8mb-psram-none","title":"Configuration for TQT pro N8 (Flash: 8MB, PSRAM: none)","text":"<p>You will need to do some changes in the <code>platformio.ini</code> file before uploading the code. It should look like this:  platformio.ini<pre><code>; PlatformIO Project Configuration File\n\n\n[platformio]\nboards_dir = ./board\ndefault_envs = T-QT-Pro-N8\n;default_envs = T-QT-Pro-N4R2\ndescription = Open source watch OS for ESP32 based watches\n\n[env:T-QT-Pro-N8]\n;[env:T-QT-Pro-N4R2]\nplatform = espressif32@6.6.0\nboard = esp32-s3-t-qt-pro\nframework = arduino\nbuild_flags = \n;   -DBOARD_HAS_PSRAM\nlib_deps = \n    lennarthennigs/Button2@^2.3.3\n    adafruit/Adafruit GFX Library@^1.11.11\n    adafruit/Adafruit MPU6050 @ ^2.0.3\n    adafruit/Adafruit Unified Sensor @ ^1.1.4\n</code></pre></p> <p>After configuring the firmware source code you can upload it to the watch.</p>"},{"location":"Release%20Notes/","title":"Release Notes","text":""},{"location":"Release%20Notes/#v033","title":"V0.3.3","text":"<p>OpenTimeWatch Configurator tool can now configure board settings. </p>"},{"location":"Release%20Notes/#v032","title":"V0.3.2","text":"<p>New OpenTimeWatch Configurator tool.</p>"},{"location":"Release%20Notes/#v031","title":"V0.3.1","text":"<p>otwUI bug fix, updated configuration for TQT pro N8 in <code>platformio.ini</code> file and better documentation.</p>"},{"location":"Release%20Notes/#v030","title":"V0.3.0","text":"<p>New UI (created using lopaka.app), multiple watch faces, Wifi support, time synchronisation, back option in menus, accelerometer support and apps and sub menus separated from the <code>main.cpp</code> file.</p>"},{"location":"Release%20Notes/#v021","title":"V0.2.1","text":"<p>Added refinements to the OS navigation, added a manual in the <code>README.md</code> and changed the tone of the speaker.</p>"},{"location":"Release%20Notes/#v020","title":"V0.2.0","text":"<p>A significant update compared to V0.1, as it introduced menus, pong, interaction with peripherals (torch and speaker), OS being open sourced, matrix effect, settings menu. </p>"},{"location":"Release%20Notes/#v010","title":"V0.1.0","text":"<p>The initial release it just had a home screen and an about screen.</p>"}]}